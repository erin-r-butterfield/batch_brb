#!/usr/bin/env python

# This software was created by the Wellcome Centre for Anti-Infectives Research using Wellcome Trust funding
# batch_brb  Copyright (C) 2020  University of Dundee
# For full details see LICENSE.txt or http://www.gnu.org/licenses/

import pandas as pd
import argparse
import numpy as np
import batch_brb_functions as bbrbf


parser = argparse.ArgumentParser(description='Combine csv results produced by the BLAST pipeline')

parser.add_argument('in1',help='First csv file')

parser.add_argument('in2',help='Second csv file')

parser.add_argument('outfile',help='Name of output')

args = parser.parse_args()


## Assign the variables
in1 = args.in1
in2 = args.in2
output = args.outfile



## Read in the csvs and get organisms
df1 = pd.read_csv(in1)
df2 = pd.read_csv(in2)
df1_names = list(df1.columns)
df2_names = list(df2.columns)
names = df1_names + (list(set(df2_names) - set(df1_names)))


## Convert the dataframes to long format with split cols
df1_long = bbrbf.melt_df(df1)
df1_long = bbrbf.split_col_values(df1_long)


df2_long = bbrbf.melt_df(df2)
df2_long = bbrbf.split_col_values(df2_long)


## Map original accessions (table 1) onto table 2
df3 = df1_long.merge(df2_long, how="left", left_on=["hit"], right_on=["Accession"])


## Extract out updated accessions for table 2
df4 = df3[df3.Accession_y.notnull()]

df5 = df4.filter(["Accession_x", "organism_y", "hit_y"], axis=1)
df5.columns = ["Accession", "organism", "hit"]


## Combine the csvs, remove duplicates and join multivalue hits
df6 = df1_long.append(df5)
df7 = df6.drop_duplicates().reset_index()
df8 = df7.pivot_table(index= ["Accession", "organism"], values= "hit", aggfunc= lambda x: ", ".join(x))


## Convert dataframe to wide format
stacked = df8.unstack(fill_value= "NA")
stacked.reset_index()
stacked.columns = stacked.columns.get_level_values(1)


## Add null organims to data
stacked_names = list(stacked.columns)
diff = np.setdiff1d(names[1:], stacked_names)
diff = diff[diff != '']
for org in diff:
    stacked[org] = 'NA'
stacked = stacked.reindex(sorted(stacked.columns), axis=1)


## Export data
stacked.to_csv(path_or_buf= (output + ".csv"))

